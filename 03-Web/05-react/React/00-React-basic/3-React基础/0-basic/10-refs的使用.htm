<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="../reactjs/react.js"></script>
    <script src="../reactjs/react-dom.js"></script>
    <script src="../reactjs/babel.js"></script>
    <title>React</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="text/babel">
      // 函数组件使用ref

      const Home = React.forwardRef(function (props, ref) {
        return (
          <div>
            <h2 ref={ref}>Home</h2>
            <button>按钮</button>
          </div>
        );
      });

      class App extends React.Component {
        constructor(props) {
          super(props);
          this.state = {};
          // 传入一个对象，通过React.createRef()方式创建出来的 : 官方建议使用此种方式
          this.titleRef = React.createRef();
          // 传入一个函数，函数的返回值会是一个元素对象
          this.titleEl = null;

          //
          this.homeTitleRef = React.createRef();
        }

        render() {
          return (
            <div>
              <h3 ref='title'>String Ref</h3>
              <h3 ref={this.titleRef}>Hello createRef</h3>
              <h3 ref={(element) => (this.titleEl = element)}>
                Callback func Ref
              </h3>
              <button onClick={() => this.changeText()}>change Text</button>
              <Home ref={this.homeTitleRef} />
              <button onClick={() => this.printHomeRef()}>
                print home ref
              </button>
            </div>
          );
        }
        changeText() {
          this.refs.title.innerHTML = 'String ref change';
          this.titleRef.current.innerHTML = 'createRef change';
          this.titleEl.innerHTML = 'Callback func change';
        }
        printHomeRef() {
          // ref 作用于自定义组件上： 可以直接调用组件内部的事件方法
          console.log(this.homeTitleRef.current);
        }
      }

      ReactDOM.render(<App />, document.getElementById('app'));
    </script>
  </body>
</html>
