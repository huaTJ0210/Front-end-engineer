<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="../reactjs/react.js"></script>
    <script src="../reactjs/react-dom.js"></script>
    <script src="../reactjs/babel.js"></script>
    <title>React</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="text/babel">
      /*

      1、React组件化
       （1）将页面拆分成一个个小的，可复用的组件；

      2、类组件：
         (1)组件的名称首字母必须大写
         (2)必须继承React.Component
         (3)类组件必须实现render函数

       3、生命周期
         （1）  装载阶段（Mount）: 组件第一次在DOM树中被渲染的过程
          (2)  更新阶段（Update）：组件状态发生改变，更新渲染的过程
         （3）  卸载阶段（Unmount）: 组件从DOM树中被移除的过程
       4、
      */
      class App extends React.Component {
        // (1-1)
        constructor(props) {
          super(props);
          this.state = {
            message: 'hello react',
          };
          console.log('constructor');
        }

        //(1-2) 设计此回调函数的意义:让组件在props发生改变时更新它自身的内部state  （2-2）更新阶段
        // 使用场景：表单获取默认值
        static getDerivedStateFromProps(nextProps, currentState) {
          // 触发时机：state变化，props变化、forceUpdate
          console.log(nextProps, currentState, 'getDerivedStateFromProps');
          // 返回值会对当前state进行修改
          return {
            message: 'hello world',
          };
        }
        // (1-3)
        // UNSAFE_componentWillMount() {
        //   console.log('componentWillMount');
        // }

        //(1-4)初始化阶段  （2-5）更新阶段
        /*
         render函数可以返回的类型
         + React元素：通过JSX创建
         + 数组或者Framents
         + Portals：可以渲染子节点到不同的DOM子树中
         + 字符串或者数值类型：渲染为文本
         + 布尔类型或者null：什么都不渲染
        */
        render() {
          console.log('render!!!!');
          return (
            <div>
              <h2>类组件</h2>
              <h2>{this.state.message}</h2>
              <button
                onClick={() => {
                  this.btnClick();
                }}
              >
                change
              </button>
            </div>
          );
        }

        // (1-5)组件已经被挂载在DOM上
        // 使用场景：获取外部资源
        componentDidMount() {
          // 发送网络请求
          console.log('componentDidMount');
          /*
            外部资源加载完毕，调用this.setState();会触发render；这样组件加载会有两次的render函数调用
          */
        }

        // (2-1)更新阶段
        // UNSAFE_componentWillReceiveProps(nextProps) {
        //   console.log(nextProps, 'UNSAFE_componentWillReceiveProps');
        // }

        // (2-3)更新阶段
        // virtual DOM是否需要重绘
        // 一般由PureComponet自动实现
        // 典型应用场景： 性能优化
        // 首次渲染或者使用forceUpdate时不会被调用
        shouldComponentUpdate() {
          // 浅比较：仅仅比较值与引用，并不会对Object中的每一值都进行比较，不适合在多层嵌套的state和Props中
          // shadowEqual
          console.log('shouldComponentUpdate');
          return true;
        }
        // (2-4) 更新阶段
        // UNSAFE_componentWillUpdate() {
        //   // 首次渲染不会调用此方法
        //   console.log('UNSAFE_componentWillUpdate');
        // }

        // (2-6)更新阶段
        // render之后调用，此时state已更新
        getSnapshotBeforeUpdate() {
          console.log('getSnapshotBeforeUpdate');
          //返回的数据在didUpdate中可以获取:通常获取render之前的DOM信息
          // 返回值作为componentDidUpdate的第三个参数
          return '100';
        }

        // (2-7)组件发生状态更新 : new props、setState()、 forceUpdate()
        // 典型场景：页面通过props重新获取数据
        // 首次渲染不会触发 ，避免死循环的发生
        componentDidUpdate(prevProps, prevState, preData) {
          // 首次渲染不会调用此方法
          console.log(prevProps, prevState, 'componentDidUpdate', preData);
        }

        // (3)组件即将被移除
        componentWillUnmount() {
          // 清除timer、取消网络、取消创建的订阅
          console.log('componentWillUnmount');
        }

        btnClick() {
          this.setState({
            message: 'hello message 1',
          });
        }
      }

      ReactDOM.render(<App title='title' />, document.getElementById('app'));
    </script>
  </body>
</html>
