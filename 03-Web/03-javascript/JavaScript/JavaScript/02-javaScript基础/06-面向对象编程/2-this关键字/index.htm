<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <script>

      // (1) this 就是属性或者方法当前所在的对象
      var person = {
        name: '张三',
        describe: function () {
          return '姓名' + this.name;
        },
      };
      person.describe(); // "姓名：张三"


      /*
        (2) 由于函数可以在不同的运行环境中执行，因此要提供一种机制在函数体内部获取当前的执行环境；
        所以this就出现了，它设计的目的就是在函数体内部，指代函数当前的运行环境
      */

      // (3) Function.prototype.call():指定函数内部this的指向（函数执行所在的作用域）
      //  func.call(thisValue, arg1, arg2, ...) : 其他参数为函数调用时需要的参数
      var obj = {};
      var f = function () {
        return this;
      };
      f() === window; // true
      f.call(obj) === obj; //true

      // (3-1) call方法可以调用对象的原生方法（继承得到的方法）
      Object.prototype.hasOwnProperty.call(obj,'toString');

      // (4) Function.prototype.apply(thisValue,[args1,args2,args3])
      // (4-1)找出数组中最大数
      var a = [10,2,4,15,9];
      Math.max.apply(null,a);
      Array.apply(null,['a',,'b']);

      // (5) Function.prototype.bind() ： 将函数体内的this绑定到某个对象上，返回一个新函数 
      
      var counter = {
        count: 0,
        inc:function() {
          this.count++;
        }
      }
      var func = counter.inc.bind(counter);
      func();
      counter.count;// 1 

      
    </script>
  </head>
  <body></body>
</html>
