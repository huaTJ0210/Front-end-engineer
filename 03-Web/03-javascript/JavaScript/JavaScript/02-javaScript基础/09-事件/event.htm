<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <div>
      <p>事件的传播</p>
    </div>
  </body>
  <script>
    /******************1、事件的传播*************************/
    var phases = {
      1: 'capture',
      2: 'target',
      3: 'bubble',
    };
    var div = document.querySelector('div');
    var p = document.querySelector('p');
    function callback(event) {
      var tagName = event.currentTarget.tagName;
      var phase = phases[event.eventPhase];
      console.log("Tag: ''" + tagName + "'.EventPhase'" + phase + "''");
    }
    div.addEventListener('click', callback, true);
    p.addEventListener('click', callback, true);
    div.addEventListener('click', callback, false);
    p.addEventListener('click', callback, false);
    /*
     (1) 浏览器总是假定click事件的目标节点，就是点击位置嵌套最深的那个节点；（捕获阶段和冒泡阶段都显示为target阶段）
     (2)事件传播的最上层对象是window，接着依次是document，html（document.documentElement）
     和body（document.body）。也就是说，上例的事件传播顺序，
     在捕获阶段依次为window、document、html、body、div、p，
     在冒泡阶段依次为p、div、body、html、document、window 
    */

    /******************2、事件的代理*************************/
    /*
      由于事件会在冒泡阶段向上传播到父节点，因此可以将子节点的监听函数定义在父节点上，由此统一处理子节点
      的事件，这种方法就叫做事件代理
    */
    var ul = document.querySelector('ul');
    ul.addEventListener('click', function (event) {
      if (event.target.tagName.toLowerCase() === 'li') {
        // do sth
      }
    });

    // (1) 停止事件的传播（捕获阶段和冒泡阶段）
    var p1 = document.querySelector('p');
    p1.addEventListener(
      'click',
      function (event) {
        // 捕获阶段停止向下传播
        event.stopPropagation();
      },
      true
    );
    p1.addEventListener(
      'click',
      function (event) {
        // 冒泡阶段停止向上冒泡
        event.stopPropagation();
      },
      false
    );
    // (2) 彻底消除绑定事件所有的监听函数
    p.addEventListener('click', function (event) {
      // 其他绑定click事件的监听函数将不会被触发
      event.stopImmediatePropagation();
    });

    /******************3、Event对象*************************/
    var ev = new Event('look', {
      bubbles: true, // 事件是否可以冒泡
      cancelable: false, // 事件是否可以取消
    });
    document.dispatchEvent(ev);
    /*
       (3-0):
       1、Event.bubbles:事件是否可以冒泡；
       2、Event.eventPhase:事件传播当前所处的阶段；【0：事件未发生，1：目前处于捕获阶段，2：事件到达目标节点，
       、3：事件处于冒泡阶段】
       3、Event.currentTarget(事件正在通过的节点) 和 Event.target（事件的原始触发节点）
    */

    /*
      (3-1): Event.preventDefault()： 取消浏览器对当前事件的默认行为
      1、点击链接浏览器会默认跳转到另外一个界面
      2、文本框设置校验条件（只能输入小写字母，若不符合要求则无法输入）
    */ 

    // (3-4): Event.composedPath(): 事件的最底层节点和冒泡经过的所有上层节点的集合
    // HTML 代码如下
    // <div>
    //   <p>Hello</p>
    // </div>
    var div = document.querySelector('div');
    var p = document.querySelector('p');

    div.addEventListener(
      'click',
      function (event) {
        console.log(event.composedPath());
      },
      false
    );
    // [p, div, body, html, document, Window]
  </script>
</html>
