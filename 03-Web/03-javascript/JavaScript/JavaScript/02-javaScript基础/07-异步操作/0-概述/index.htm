<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <script>
      // ******** (1) 单线程模型 **************
      /*
        （1）JS脚本只在一个线程上运行，即同时只能运行一个任务，其他任务需要排队；
        （2）JS引擎有多个线程，运行脚本的是主线程；
        （3）JS采用单线程模型主要为了避免多线程的DOM操作，让浏览器变得复杂；
        （4）对于CPU消耗大的操作（类似ajax请求）JS内部采用事件循环的方式处理任务；
      */
      // ******** (2) 同步任务和异步任务 **************
      /*
        1、同步任务：没有被引擎挂起、在主线程上排队执行的任务；只要当前任务执行完毕后，才能执行下一个任务；
        2、异步任务：不进入主线程（例如发送网络请求，请求发出后，不再等待），而进入任务队列的任务；
        异步任务不具有：“堵塞”效应；
      */
      // ******** (3) 任务队列和事件循环 **************
      /*
        1、JavaScript运行时除了一个正在运行的主线程，还提供了一个任务队列（task queue：实际根据异步任务的类型，
        存在多个任务队列）；里面是各种需要当前程序处理的异步任务；
        2、JavaScript引擎循环去检查那些挂起来的异步任务，是不是可以进入主线程，这种循环检查的机制，
        就叫做：事件循环（event loop）

      */
      // ******** (4) 异步操作的模式 **************
      /*
        (4-1)回调函数:如果f1为异步则f2在f1执行后再执行;将f2作为回调函数传入f1中;
        回调函数的缺点：
        不利于代码的阅读和维护，各部分之间高度耦合；使得程序结构混乱，流程难以追踪（尤其多个函数嵌套的情况）
      */
      function f1(callBack) {
        // do something
        callBack();
      }
      function f2() {}
      f1(f2);
      /*
        (4-2) 事件监听：采用事件驱动模式，
         缺点是整个程序都要变成事件驱动型，
         运行流程会变得很不清晰。阅读代码的时候，很难看出主流程
      */
      function f3() {
        setTimeout(function () {
          // ...
          f3.trigger('done'); // f3执行完毕后触发‘done’事件的发生，进而开始执行f2
        }, 1000);
      }
      f3.on('done', f2);
      /*
      (4-3) 发布订阅模式：
      因为可以通过查看“消息中心”，了解存在多少信号、
      每个信号有多少订阅者，从而监控程序的运行
      */
      jQuery.subscribe('done', f2);
      function f1() {
        setTimeout(function () {
          // ...
          jQuery.publish('done');
        }, 1000);
      }

      // ******** (5) 异步操作的流程控制 **************
      function asyncTask(arg, callback) {
        console.log('参数为' + arg + ',1秒后返回结果');
        setTimeout(function () {
          callback(arg * 2);
        }, 1000);
      }
      function finalTask(value) {
        console.log('完成:', value);
      }
      var items = [1, 2, 3, 4, 5, 6];
      var results = [];

      // (5-1) 所有异步任务串行执行:创建队列，从队列头部取异步任务
      function serial(item) {
        if (item) {
          asyncTask(item, function (value) {
            results.push(value);
            return serial(items.unshift());
          });
        } else {
          finalTask(results[results.length - 1]);
        }
      }
      serial(items.unshift());
      // (5-2) 并行执行
      items.forEach(function (item) {
        asyncTask(item, function (result) {
          results.push(result);
          if (results.length === items.length) {
            finalTask(results[results.length - 1]);
          }
        });
      });
      // (5-3) 并行及串行相互结合 ；控制并行执行任务的数量
      var limit = 2;
      var running = 0;
      function launcher() {
        while (running < limit && items.length > 0) {
          var item = items.shift();
          asyncTask(item, function (result) {
            results.push(result);
            running--;
            if (items.length > 0) {
              launcher();
            } else if (running == 0) {
              finalTask(results[results.length - 1]);
            }
          });
          running++;
        }
      }
    </script>
  </head>
  <body></body>
</html>
