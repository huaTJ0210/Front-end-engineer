<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <script>
      // function 命令
      function print(s) {
        console.log(s)
      }
      // 函数表达式
      var print = function (s) {
        console.log(s)
      }
      // Function构造函数创建函数
      var add = Function('x', 'y', 'return x + y')
      // 斐波那契数列:num代表元素在数列中的位置
      function fib(num) {
        if (num === 0) return 0
        if (num === 1) return 1
        return fib(num - 2) + fib(num - 1)
      }
      /*
        JavaScript中的Array.prototype.slice.call()方法学习
        Array.prototype.slice.call(arguments)将执行Array.prototype.slice()这个函数的this指向了arguments
        最终返回一个新的数组
      */
      Array.prototype.slice = function (start, end) {
        var result = new Array()
        start = start || 0
        end = end || this.length // this指向调用的对象，当用了call后，能够改变this的指向，也就是指向传进来的对象，这是关键

        for (var i = start; i < end; i++) {
          result.push(this[i])
        }

        return result
      }
      /*
      闭包的作用：
      （1）读取函数内部的变量
      （2）将持有的变量一直存在内存中
      （3）定义私有变量
      */
      function Person(name) {
        var _age
        function setAge(age) {
          _age = age
        }
        function getAge() {
          return _age
        }
        return {
          name: name,
          getAge: getAge,
          setAge: setAge,
        }
      }
    </script>
  </head>
  <body></body>
</html>
