<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=<device-width>, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
        /*
          "范畴”想象为一个容器；
           + 值（value）
           + 值的变形关系，（函数）
        */
        class Category{
            constructor(val){
                this.val = val;
            }
            addOne(x){
                return x + 1;
            }
        }

        // （1）函数合成
        const compose = function (f,g){
            return function(x){
                return f(g(x));
            }
        }
        // （2）函数柯里化:把一个多参函数转变为一个入参函数的过程
        function add(x,y){
            return x + y;  // 普通函数
        }
        add(1,2); // 3

        // 柯里化
        function addX(y){
            return function(y){
                return x + y;
            }
        }
        addX(2)(1);

        /*
          （3）函子(Functor):首先它是一种容器；
           它的变形关系可以依次作用于每一个值，
           将当前容器变成另一个容器；
           函子的标志就是具有map方法
        */ 

        class Functor{
            constructor(val){
                this.val = val;
            }
            of = function(val){
                return new Functor(val);
            }
            map(f){
                return of(f(this.val));
            }
        
        }
        
        // 
        function test(){
            Functor.of(2).map(function(two){
                return two + 2;
            });
        }

        

    </script>
</body>
</html>