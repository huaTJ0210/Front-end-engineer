<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <script>
      // ------ (1) 函数参数的默认值：------
      // 1-1 ES5的写法：
      function foo(x, y) {
        y = y || 'World'; // 此处会出现当y=''时，也会使用默认值的情况
        console.log(x, y);
      }
      // 1-2 ES6的写法：
      function foo1(x, y = 'world') {
        console.log(x, y);
      }
      // 1-3 默认参数与解构赋值默认值结合
      function foo2({ x, y = 5 } = {}) {
        console.log(x, y);
      }
      // 1-4 对于undefined可以触发默认值，但null不可以
      function foo3(x = 5, y = 6) {
        console.log(x, y);
      }
    //  console.log(undefined, null);

      // ------ (2) length -----
      //  函数的length值是预期传入参数的个数

      // ------ (3) 作用域 -----
      var x = 1;
      function foo5(x, y = function() {x = 2;}) {
           x = 3;
          let func = function(){
            console.log('内部函数');
          }
          let a = 10;
          y();
          console.log(x);
          debugger;
      }

      foo5() // 3
      /*
        (3-2): 普通函数的执行
        1、以下代码执行时，会形成作用域[scope]，其中又包含[[Gloabl]、[local]]
        其中[Gloabl]是全局作用域，[local]作用域是函数内部的作用域；
        2、foo6(x,y)的声明相当于在函数内部定义了2个局部变量；
        foo6(x,y){
          // 根据参数会隐式声明以下两个变量
          var x;
          var y;
        }
        当函数执行完毕，超出当前函数的作用域时，x会被内存回收
      */
      var x = 3;
      function foo6(x, y) {
        debugger;
        x = 4;
        console.log(x); //4
        debugger;
      }
      //foo6(5, 5);
      //console.log(x); // 3


      function foo7(a,b){
        debugger
        var x = 1;
        let z = 0;
        function too(){
          x = 2;
        }
        too();
        console.log(x);
      }
      foo7();

      
    </script>
  </head>
  <body></body>
</html>
